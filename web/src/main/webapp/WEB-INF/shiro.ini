#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# INI configuration is very powerful and flexible, while still remaining succinct.
# Please http://shiro.apache.org/configuration.html and
# http://shiro.apache.org/web.html for more.

#securityManager.rememberMeManager.cipherKey = 0x3707344A4093822299F31D008

[main]
# Create and setup user filter.
user = net.icsl.ledar.web.security.FacesAjaxAwareUserFilter
user.loginUrl = /login.xhtml
anyofroles = net.icsl.ledar.web.security.AnyOfRolesAuthorizationFilter

# Create JDBC realm.
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
#usernameTokenReal = org.tsp.project.investments.saints.porfolio.util.UsernameTokenRealm

cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager

securityManager.cacheManager = $cacheManager

#securityManager.sessionManager.globalSessionTimeout = 1800000

# Configure JDBC realm datasource.
dataSource = org.apache.shiro.jndi.JndiObjectFactory
dataSource.resourceName = java:jboss/datasources/net.icsl.ledarDS
#dataSource.URL = jdbc:mysql://localhost:8889/my_investment_db
#dataSource.user = root
#dataSource.password = root
jdbcRealm.dataSource = $dataSource

# Configure JDBC realm SQL queries.
jdbcRealm.authenticationQuery = SELECT pword FROM logindetails WHERE username = ?
#jdbcRealm.userRolesQuery = SELECT authentication_role_id FROM User_Roles WHERE logindetailId = (SELECT id FROM logindetails WHERE username = ?)
jdbcRealm.userRolesQuery = SELECT a.`role_name` FROM `user_roles` u JOIN `authentication_roles` a ON a.`authentication_role_id` = u.`authentication_role_id` WHERE u.`logindetail_id` = (SELECT logindetail_id FROM logindetails WHERE username = ?)

# Configure JDBC realm password hashing.
credentialsMatcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
credentialsMatcher.hashAlgorithmName = SHA-256
jdbcRealm.credentialsMatcher = $credentialsMatcher

#passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
#passwordMatcher.passwordService = $passwordService
#jdbcRealm.credentialsMatcher = $credentialsMatcher

[urls]

/login.xhtml = user
/app/administrator/** = user, roles[ADMINISTRATOR]
#/app/appAdmin/** = user, roles[APPLICATION ADMINISTRATOR]
/app/appAdmin/** = anyofroles["APPLICATION ADMINISTRATOR, ADMINISTRATOR, ADMINISTRATOR USER, HEAD OF OPERATIONS"]
/app/** = user
#/app/administrator/** = anyofroles["ADMINISTRATOR,Human Resources & Admin"]
